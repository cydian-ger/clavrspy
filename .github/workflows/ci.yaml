name: CI

on:
  push:
  pull_request:

jobs:
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version:
          # - "3.8"
          # - "3.9"
          # - "3.10"
          # - "3.11"
          # - "3.12"
          - "3.13"
          # - "pypy-3.8"
          # - "pypy-3.9"

    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      - name: Download latest clavrs.exe release (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          $release = Invoke-RestMethod -Uri https://api.github.com/repos/cydian-ger/clavrs/releases/latest
          $asset = $release.assets | Where-Object { $_.name -match '^clavrs-.*\.exe$' } | Select-Object -First 1
          if (-not $asset) {
            Write-Error "No matching clavrs executable found in release assets!"
            exit 1
          }
          Write-Host "Downloading $($asset.name) from $($asset.browser_download_url)"
          # Save as original filename
          $outputPath = Join-Path -Path LocalDB/db -ChildPath $asset.name
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $outputPath

      - name: Download latest clavrs release (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          release=$(curl -s https://api.github.com/repos/cydian-ger/clavrs/releases/latest)
          asset_name=$(echo "$release" | jq -r '.assets[] | select(.name | test("linux")) | .name' | head -n1)
          asset_url=$(echo "$release" | jq -r '.assets[] | select(.name == "'"$asset_name"'") | .browser_download_url')
          if [ -z "$asset_url" ]; then
            echo "No matching clavrs AppImage found in release assets!"
            exit 1
          fi
          echo "Downloading $asset_url"
          mkdir -p LocalDB/db
          curl -L "$asset_url" -o "LocalDB/db/$asset_name"
          chmod +x "LocalDB/db/$asset_name"
  

      - name: Run unittests
        run: python -m test.run_tests
